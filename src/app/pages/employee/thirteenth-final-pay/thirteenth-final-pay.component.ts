import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SidebarComponent } from '../../../shared/sidebar/sidebar.component';
import { HeaderComponent } from '../../../shared/header/header.component';

interface MonthlyAccrual {
  month: string;
  basicSalaryUsed: number;
  accrual: number;
}

interface ThirteenthMonthSummary {
  year: number;
  totalBasicSalaryUsed: number;
  computedThirteenthMonthPay: number;
  monthlyAccruals: MonthlyAccrual[];
}

interface PayItem {
  label: string;
  amount: number;
}

interface FinalPaySummary {
  lastWorkingDay: Date;
  clearanceStatus: 'Pending' | 'Cleared' | 'With Holds';
  earnings: PayItem[];
  deductions: PayItem[];
}

@Component({
  selector: 'app-thirteenth-final-pay',
  imports: [CommonModule, SidebarComponent, HeaderComponent],
  templateUrl: './thirteenth-final-pay.component.html',
  styleUrl: './thirteenth-final-pay.component.scss'
})
export class ThirteenthFinalPayComponent {
  // 13th Month dummy summary
  thirteenthSummary: ThirteenthMonthSummary = {
    year: new Date().getFullYear(),
    totalBasicSalaryUsed: 360000,
    computedThirteenthMonthPay: 30000,
    monthlyAccruals: [
      { month: 'Jan', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Feb', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Mar', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Apr', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'May', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Jun', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Jul', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Aug', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Sep', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Oct', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Nov', basicSalaryUsed: 30000, accrual: 2500 },
      { month: 'Dec', basicSalaryUsed: 30000, accrual: 2500 },
    ]
  };

  // Final Pay dummy summary
  finalPay: FinalPaySummary = {
    lastWorkingDay: new Date(new Date().getFullYear(), new Date().getMonth(), 28),
    clearanceStatus: 'Cleared',
    earnings: [
      { label: 'Unpaid Salary (pro-rated)', amount: 12000 },
      { label: 'Unused Vacation Leave Payout', amount: 5000 },
      { label: '13th Month Differential', amount: 2000 },
    ],
    deductions: [
      { label: 'Company Loan Balance', amount: 1500 },
      { label: 'Tax Adjustment', amount: 800 },
    ]
  };

  // Modal states
  showThirteenthModal = false;
  showFinalPayModal = false;

  formatCurrency(amount: number): string {
    return new Intl.NumberFormat('en-PH', { style: 'currency', currency: 'PHP' }).format(amount);
  }

  total(items: PayItem[]): number {
    return items.reduce((sum, i) => sum + i.amount, 0);
  }

  netFinalPay(): number {
    return this.total(this.finalPay.earnings) - this.total(this.finalPay.deductions);
  }

  openThirteenthModal(): void { this.showThirteenthModal = true; }
  closeThirteenthModal(): void { this.showThirteenthModal = false; }

  openFinalPayModal(): void { this.showFinalPayModal = true; }
  closeFinalPayModal(): void { this.showFinalPayModal = false; }

  downloadThirteenthCertificate(): void {
    const w = window.open('', '_blank');
    if (!w) { return; }
    const doc = `
      <html><head><title>13th Month Certificate</title></head>
      <body>
        <h2>13th Month Certificate - ${this.thirteenthSummary.year}</h2>
        <p>Total Basic Salary Used: ${this.formatCurrency(this.thirteenthSummary.totalBasicSalaryUsed)}</p>
        <p>Computed 13th Month Pay: ${this.formatCurrency(this.thirteenthSummary.computedThirteenthMonthPay)}</p>
        <hr/>
        <p>Generated by Payroll System</p>
      </body></html>
    `;
    w.document.write(doc);
    w.document.close();
    w.focus();
    w.print();
  }

  downloadFinalPayslip(): void {
    const w = window.open('', '_blank');
    if (!w) { return; }
    const doc = `
      <html><head><title>Final Payslip</title></head>
      <body>
        <h2>Final Payslip</h2>
        <p>Last Working Day: ${new Intl.DateTimeFormat('en-PH').format(this.finalPay.lastWorkingDay)}</p>
        <p>Clearance Status: ${this.finalPay.clearanceStatus}</p>
        <h3>Earnings</h3>
        <ul>
          ${this.finalPay.earnings.map(e => `<li>${e.label}: ${this.formatCurrency(e.amount)}</li>`).join('')}
        </ul>
        <h3>Deductions</h3>
        <ul>
          ${this.finalPay.deductions.map(d => `<li>${d.label}: ${this.formatCurrency(d.amount)}</li>`).join('')}
        </ul>
        <h3>Net Final Pay: ${this.formatCurrency(this.netFinalPay())}</h3>
        <hr/>
        <p>Generated by Payroll System</p>
      </body></html>
    `;
    w.document.write(doc);
    w.document.close();
    w.focus();
    w.print();
  }
}


